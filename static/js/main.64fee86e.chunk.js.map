{"version":3,"sources":["utils/fetchClient.ts","api/todos.ts","components/ErrorNotification/ErrorNotification.tsx","types/Status.ts","components/Footer/Footer.tsx","components/Header/Header.tsx","components/ModalOverlay/ModalOverlay.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["request","url","delay","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","ok","errorMessage","Error","json","client","getTodos","uri","concat","addTodos","updateTodos","ErrorNotification","React","memo","_ref","error","removeError","useEffect","_jsxs","className","children","_jsx","type","onClick","Status","Footer","onFilterChange","filter","countOfActiveTodos","completedTodoLength","removeAllCompletedTodos","href","classNames","selected","ALL","ACTIVE","COMPLETED","disabled","Header","addNewTodo","updateAllTodosStatus","isAllTodosCompleted","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","isTitleEmpty","setIsTitleEmpty","_useState5","_useState6","isAllCompleted","setIsAllCompleted","active","currentStatus","onSubmit","event","preventDefault","trim","placeholder","value","onChange","target","ModalOverlay","isTodoUpdated","TodoItem","todo","removeTodo","tempTodoId","updateTodoStatus","updateTodoTitle","isLoading","isTodoEditing","setIsTodoEditing","title","inputQuery","setInputQuery","compareInputQuery","setCompareInputQuery","id","completed","checkIsNeedQueryUpdated","onDoubleClick","checked","onKeyUp","key","onBlur","autoFocus","_Fragment","TodoList","todos","tempTodo","completedTodos","loadingTodoIds","map","includes","USER_ID","App","setTodos","currentError","setCurrentError","status","setStatus","_useState7","_useState8","setTempTodo","_useState9","_useState10","setLoadingTodoIds","visibleTodos","useMemo","getTodosFromServer","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","t0","message","stop","_x","apply","useCallback","_ref2","_callee2","responseTodo","_context2","userId","_objectSpread","_toConsumableArray","currentTodos","finish","_x2","_ref3","_callee3","_context3","prevTodos","t","ID","_x3","_callee4","currentCompletedTodos","_context4","all","currentCompletedTodo","_ref5","_callee5","isCompleted","_context5","_x4","_x5","forEach","_ref6","_callee6","activeTodo","_context6","_x6","_ref7","_callee7","_context7","_x7","_x8","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.64fee86e.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        let errorMessage;\n\n        switch (method) {\n          case 'POST':\n            errorMessage = 'Unable to add a todo';\n            break;\n          case 'PATCH':\n            errorMessage = 'Unable to update a todo';\n            break;\n          case 'DELETE':\n            errorMessage = 'Unable to delete a todo';\n            break;\n          default:\n            errorMessage = 'Unexpected Error';\n            break;\n        }\n\n        throw new Error(errorMessage);\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (uri: string) => {\n  return client.get<Todo[]>(`/todos${uri}`);\n};\n\nexport const addTodos = (uri: string, data: any) => {\n  return client.post<Todo>(`/todos${uri}`, data);\n};\n\nexport const deleteTodos = (uri: string) => {\n  return client.delete(`/todos${uri}`);\n};\n\nexport const updateTodos = (uri: string, data: any) => {\n  return client.patch(`/todos${uri}`, data);\n};\n","import React, { useEffect } from 'react';\n\ntype Props = {\n  error: string;\n  removeError: () => void\n};\nexport const ErrorNotification: React.FC<Props> = React.memo(({\n  error,\n  removeError,\n}) => {\n  useEffect(() => {\n    setTimeout(removeError, 3000);\n  }, []);\n\n  return (\n    <div className=\"notification is-danger is-light has-text-weight-normal\">\n      {/* // eslint-disable-next-line */}\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={removeError}\n        aria-label=\"An error message\"\n      />\n      {error}\n    </div>\n  );\n});\n","export enum Status {\n  ALL,\n  COMPLETED,\n  ACTIVE,\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  onFilterChange: (type: Status) => void;\n  filter: Status;\n  countOfActiveTodos: number;\n  completedTodoLength: number;\n  removeAllCompletedTodos: () => void;\n};\n\nexport const Footer: React.FC<Props> = React.memo(({\n  onFilterChange,\n  filter,\n  countOfActiveTodos,\n  completedTodoLength,\n  removeAllCompletedTodos,\n}) => {\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${countOfActiveTodos} items left`}\n      </span>\n\n      <nav className=\"filter\">\n        <a\n          href=\"#/\"\n          className={classNames(\n            'filter__link',\n            { selected: filter === Status.ALL },\n          )}\n          onClick={() => {\n            onFilterChange(Status.ALL);\n          }}\n        >\n          All\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={classNames(\n            'filter__link',\n            { selected: filter === Status.ACTIVE },\n          )}\n          onClick={() => {\n            onFilterChange(Status.ACTIVE);\n          }}\n        >\n          Active\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={classNames(\n            'filter__link',\n            { selected: filter === Status.COMPLETED },\n          )}\n          onClick={() => {\n            onFilterChange(Status.COMPLETED);\n          }}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        type=\"button\"\n        className={classNames('todoapp__clear-completed', {\n          'todoapp__clear-completed--novisible': !completedTodoLength,\n        })}\n        onClick={removeAllCompletedTodos}\n        disabled={!completedTodoLength}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  addNewTodo: (title: string) => void;\n  updateAllTodosStatus: (isCompleted: boolean) => void;\n  isAllTodosCompleted: boolean;\n};\n\nexport const Header: React.FC<Props> = React.memo(({\n  addNewTodo,\n  updateAllTodosStatus,\n  isAllTodosCompleted,\n}) => {\n  const [query, setQuery] = useState('');\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isAllCompleted, setIsAllCompleted] = useState(false);\n\n  useEffect(() => {\n    setIsAllCompleted(isAllTodosCompleted);\n  }, [isAllTodosCompleted]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setIsTitleEmpty(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (query) {\n      addNewTodo(query.trim());\n      setQuery('');\n      setIsTitleEmpty(false);\n    } else {\n      setIsTitleEmpty(true);\n    }\n  };\n\n  const toggleTodosStatusForAll = () => {\n    setIsAllCompleted(currentStatus => {\n      return !currentStatus;\n    });\n    updateAllTodosStatus(!isAllCompleted);\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        type=\"button\"\n        className={classNames('todoapp__toggle-all',\n          { active: isAllCompleted })}\n        aria-label=\"Toogle all\"\n        onClick={toggleTodosStatusForAll}\n      />\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={query}\n          onChange={handleInput}\n        />\n      </form>\n      {isTitleEmpty && (\n        <p className=\"todoapp__notification-empty\">\n          {'Title can\\'t be empty'}\n        </p>\n      )}\n    </header>\n  );\n});\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  isTodoUpdated: boolean;\n};\n\nexport const ModalOverlay: React.FC<Props> = React.memo(({ isTodoUpdated }) => {\n  return (\n    <div className={classNames('modal overlay',\n      { 'is-active': isTodoUpdated })}\n    >\n      <div className=\"modal-background has-background-white-ter\" />\n      <div className=\"loader\" />\n    </div>\n  );\n});\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { ModalOverlay } from '../ModalOverlay';\n\ntype Props = {\n  todo: Todo;\n  removeTodo: (todo: Todo) => void;\n  tempTodoId?: number | null;\n  updateTodoStatus: (isCompleted: boolean, todo: Todo) => void;\n  updateTodoTitle: (title: string, todo: Todo) => void;\n  isLoading: boolean;\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({\n  todo,\n  removeTodo,\n  tempTodoId,\n  updateTodoStatus,\n  updateTodoTitle,\n  isLoading,\n}) => {\n  const [isTodoEditing, setIsTodoEditing] = useState(false);\n  const [inputQuery, setInputQuery] = useState(todo.title);\n  const [compareInputQuery, setCompareInputQuery] = useState(inputQuery);\n\n  const {\n    title,\n    id,\n    completed,\n  } = todo;\n\n  useEffect(() => {\n    setCompareInputQuery(compareInputQuery);\n  }, [todo]);\n\n  const checkIsNeedQueryUpdated = () => {\n    if (!inputQuery) {\n      removeTodo(todo);\n\n      return;\n    }\n\n    if (inputQuery !== compareInputQuery) {\n      updateTodoTitle(inputQuery, todo);\n    }\n\n    setIsTodoEditing(false);\n  };\n\n  const handlerOnBlur = () => {\n    checkIsNeedQueryUpdated();\n  };\n\n  const handlerSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    checkIsNeedQueryUpdated();\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsTodoEditing(false);\n      setInputQuery(compareInputQuery);\n    }\n  };\n\n  const toggleStatus = () => {\n    updateTodoStatus(!todo.completed, todo);\n  };\n\n  return (\n    <div\n      className={classNames('todo', { completed })}\n      onDoubleClick={() => setIsTodoEditing(true)}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onChange={toggleStatus}\n        />\n      </label>\n\n      {isTodoEditing ? (\n        <form onSubmit={handlerSubmit}>\n          <input\n            type=\"text\"\n            className=\"todo__title-field\"\n            placeholder=\"Empty todo will be deleted\"\n            value={inputQuery}\n            onChange={(event) => setInputQuery(event.target.value)}\n            onKeyUp={handleKeyUp}\n            onBlur={handlerOnBlur}\n            // eslint-disable-next-line\n            autoFocus\n          />\n        </form>\n      )\n        : (\n          <>\n            <span className=\"todo__title\">\n              {title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              onClick={() => removeTodo(todo)}\n            >\n              x\n            </button>\n          </>\n        )}\n\n      {isLoading && (\n        <ModalOverlay isTodoUpdated={id === tempTodoId} />\n      )}\n    </div>\n  );\n});\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  removeTodo: (todo: Todo) => void\n  tempTodo: Todo | null;\n  completedTodos: Todo[];\n  updateTodoStatus: (isCompleted: boolean, todo: Todo) => void;\n  updateTodoTitle: (title: string, todo: Todo) => void;\n  loadingTodoIds: number[];\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  tempTodo,\n  removeTodo,\n  completedTodos,\n  updateTodoStatus,\n  updateTodoTitle,\n  loadingTodoIds,\n}) => {\n  return (\n    <section className=\"todoapp__main\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          removeTodo={removeTodo}\n          updateTodoStatus={updateTodoStatus}\n          updateTodoTitle={updateTodoTitle}\n          tempTodoId={completedTodos.includes(todo)\n            || (tempTodo?.id === todo.id)\n            ? todo.id\n            : null}\n          isLoading={loadingTodoIds.includes(todo.id)}\n        />\n      ))}\n      {tempTodo?.id === 0 && (\n        <TodoItem\n          todo={tempTodo}\n          removeTodo={removeTodo}\n          tempTodoId={tempTodo.id}\n          updateTodoStatus={updateTodoStatus}\n          updateTodoTitle={updateTodoTitle}\n          isLoading\n        />\n      )}\n    </section>\n  );\n});\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  addTodos,\n  deleteTodos,\n  getTodos,\n  updateTodos,\n} from './api/todos';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Status } from './types/Status';\nimport { Todo } from './types/Todo';\nimport { UserWarning } from './UserWarning';\n\nconst USER_ID = 6397;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [currentError, setCurrentError] = useState('');\n  const [status, setStatus] = useState<Status>(Status.ALL);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [loadingTodoIds, setLoadingTodoIds] = useState<number[]>([]);\n  const visibleTodos = todos.filter(\n    todo => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n        case Status.COMPLETED:\n          return todo.completed;\n        case Status.ALL:\n        default:\n          return true;\n      }\n    },\n  );\n\n  const completedTodos = useMemo(\n    () => todos.filter(todo => todo.completed), [todos],\n  );\n\n  const getTodosFromServer = async (uri: string) => {\n    try {\n      setCurrentError('');\n      const data = await getTodos(uri);\n\n      setTodos(data);\n    } catch (error) {\n      if (error instanceof Error) {\n        setCurrentError(error.message);\n      }\n    }\n  };\n\n  const addNewTodo = useCallback(async (title: string) => {\n    setCurrentError('');\n\n    const data = {\n      title,\n      userId: USER_ID,\n      completed: false,\n    };\n\n    try {\n      setTempTodo({ ...data, id: 0 });\n      setLoadingTodoIds((prev: number[]) => ([...prev, 0]));\n\n      const responseTodo = await addTodos(`?userId=${USER_ID}`, data);\n\n      setTodos(currentTodos => [...currentTodos, responseTodo]);\n    } catch (error) {\n      if (error instanceof Error) {\n        setCurrentError(error.message);\n      }\n    } finally {\n      setTempTodo(null);\n    }\n  }, []);\n\n  const removeTodo = useCallback(async (todo: Todo) => {\n    try {\n      setCurrentError('');\n      setTempTodo(todo);\n      setLoadingTodoIds((prev: number[]) => ([...prev, todo.id]));\n      await deleteTodos(`/${todo.id}?userId=${USER_ID}`);\n      setTodos((prevTodos) => prevTodos.filter((t) => t.id !== todo.id));\n    } catch (error) {\n      if (error instanceof Error) {\n        setCurrentError(error.message);\n      }\n    } finally {\n      setTempTodo(null);\n      setLoadingTodoIds(\n        (prevTodos) => prevTodos.filter((ID) => ID !== todo.id),\n      );\n    }\n  }, []);\n\n  const removeAllCompletedTodos = useCallback(async () => {\n    const currentCompletedTodos = todos.filter(todo => todo.completed);\n\n    await Promise.all(currentCompletedTodos.map(\n      currentCompletedTodo => removeTodo(currentCompletedTodo),\n    ));\n  }, [todos]);\n\n  const updateTodoStatus = useCallback(async (\n    isCompleted: boolean,\n    todo: Todo,\n  ) => {\n    try {\n      setCurrentError('');\n      setTempTodo(todo);\n      setLoadingTodoIds((prev: number[]) => ([...prev, todo.id]));\n      await updateTodos(`/${todo.id}?userId=${USER_ID}`, { completed: isCompleted });\n      await getTodosFromServer(`?userId=${USER_ID}`);\n    } catch (error) {\n      if (error instanceof Error) {\n        setCurrentError(error.message);\n      }\n    } finally {\n      setTempTodo(null);\n      setLoadingTodoIds(\n        (prevTodos) => prevTodos.filter((ID) => ID !== todo.id),\n      );\n    }\n  }, []);\n\n  const updateAllTodosStatus = useCallback((isCompleted: boolean) => {\n    const updatedTodos = todos.filter(todo => todo.completed !== isCompleted);\n\n    updatedTodos.forEach(async activeTodo => {\n      await updateTodoStatus(isCompleted, activeTodo);\n    });\n  }, [todos]);\n\n  const updateTodoTitle = useCallback(async (title: string, todo: Todo) => {\n    try {\n      setCurrentError('');\n      setTempTodo(todo);\n      setLoadingTodoIds((prev: number[]) => ([...prev, todo.id]));\n      await updateTodos(`/${todo.id}?userId=${USER_ID}`, { title });\n      setTodos((prevTodos) => prevTodos.map((t) => {\n        if (t.id === todo.id) {\n          return { ...t, title };\n        }\n\n        return t;\n      }));\n    } catch (error) {\n      if (error instanceof Error) {\n        setCurrentError(error.message);\n      }\n    } finally {\n      setTempTodo(null);\n      setLoadingTodoIds(\n        (prevTodos) => prevTodos.filter((ID) => ID !== todo.id),\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    getTodosFromServer(`?userId=${USER_ID}`);\n  }, []);\n\n  const removeError = useCallback(() => {\n    setCurrentError('');\n  }, []);\n\n  const countOfActiveTodos = useMemo(() => (\n    todos.filter(todo => !todo.completed).length\n  ), [todos]);\n\n  const isAllTodosCompleted = useMemo(() => {\n    return todos.length === completedTodos.length && !!todos.length;\n  }, [todos, completedTodos.length]);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n      <div className=\"todoapp__content\">\n        <Header\n          addNewTodo={addNewTodo}\n          updateAllTodosStatus={updateAllTodosStatus}\n          isAllTodosCompleted={isAllTodosCompleted}\n        />\n        {todos.length !== 0 && (\n          <>\n            <TodoList\n              todos={visibleTodos}\n              removeTodo={removeTodo}\n              tempTodo={tempTodo}\n              loadingTodoIds={loadingTodoIds}\n              completedTodos={completedTodos}\n              updateTodoStatus={updateTodoStatus}\n              updateTodoTitle={updateTodoTitle}\n            />\n            <Footer\n              onFilterChange={setStatus}\n              filter={status}\n              countOfActiveTodos={countOfActiveTodos}\n              completedTodoLength={completedTodos.length}\n              removeAllCompletedTodos={removeAllCompletedTodos}\n            />\n          </>\n        )}\n      </div>\n      {currentError && (\n        <ErrorNotification\n          error={currentError}\n          removeError={removeError}\n        />\n      )}\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<App />);\n"],"sourceRoot":""}